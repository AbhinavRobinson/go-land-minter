// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package land_contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MainMetaData contains all meta data concerning the Main contract.
var MainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"AdminAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintLand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"x\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"y\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"data\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"batchMintLand\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"getIdFromCoordinates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCoordinatesFromId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f536167612773204c616e640000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4c414e4400000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620001a6565b508060019080519060200190620000af929190620001a6565b505050620000d2620000c6620000d860201b60201c565b620000e060201b60201c565b620002bb565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001b49062000256565b90600052602060002090601f016020900481019282620001d8576000855562000224565b82601f10620001f357805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022357825182559160200191906001019062000206565b5b50905062000233919062000237565b5090565b5b808211156200025257600081600090555060010162000238565b5090565b600060028204905060018216806200026f57607f821691505b602082108114156200028657620002856200028c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b613e1080620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806362acf799116100b857806395d89b411161007c57806395d89b41146103ae578063a22cb465146103cc578063b88d4fde146103e8578063c87b56dd14610404578063e985e9c514610434578063f2fde38b1461046457610142565b806362acf799146102f65780636352211e1461032657806370a0823114610356578063715018a6146103865780638da5cb5b1461039057610142565b806323b872dd1161010a57806323b872dd1461021157806324d7806c1461022d57806337eee4e81461025d57806342842e0e1461028d57806343c33276146102a95780634b0bddd2146102da57610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806315300b79146101e1575b600080fd5b610161600480360381019061015c919061294e565b610480565b60405161016e9190612fad565b60405180910390f35b61017f610562565b60405161018c9190612fc8565b60405180910390f35b6101af60048036038101906101aa91906129a0565b6105f4565b6040516101bc9190612efb565b60405180910390f35b6101df60048036038101906101da9190612867565b610679565b005b6101fb60048036038101906101f69190612a05565b610791565b60405161020891906132aa565b60405180910390f35b61022b60048036038101906102269190612761565b610937565b005b610247600480360381019061024291906126fc565b610997565b6040516102549190612fad565b60405180910390f35b610277600480360381019061027291906128a3565b6109ed565b6040516102849190612f8b565b60405180910390f35b6102a760048036038101906102a29190612761565b610ce0565b005b6102c360048036038101906102be91906129a0565b610d00565b6040516102d19291906132c5565b60405180910390f35b6102f460048036038101906102ef919061282b565b610dad565b005b610310600480360381019061030b91906129c9565b610ebd565b60405161031d91906132aa565b60405180910390f35b610340600480360381019061033b91906129a0565b610f37565b60405161034d9190612efb565b60405180910390f35b610370600480360381019061036b91906126fc565b610fe9565b60405161037d91906132aa565b60405180910390f35b61038e6110a1565b005b610398611129565b6040516103a59190612efb565b60405180910390f35b6103b6611153565b6040516103c39190612fc8565b60405180910390f35b6103e660048036038101906103e1919061282b565b6111e5565b005b61040260048036038101906103fd91906127b0565b6111fb565b005b61041e600480360381019061041991906129a0565b61125d565b60405161042b9190612fc8565b60405180910390f35b61044e60048036038101906104499190612725565b6113af565b60405161045b9190612fad565b60405180910390f35b61047e600480360381019061047991906126fc565b611443565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061054b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061055b575061055a8261153b565b5b9050919050565b60606000805461057190613614565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90613614565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b5050505050905090565b60006105ff826115a5565b61063e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610635906131ca565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061068482610f37565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec9061324a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610714611611565b73ffffffffffffffffffffffffffffffffffffffff16148061074357506107428161073d611611565b6113af565b5b610782576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107799061310a565b60405180910390fd5b61078c8383611619565b505050565b60006008600061079f611611565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061082b57506107f5611129565b73ffffffffffffffffffffffffffffffffffffffff16610813611611565b73ffffffffffffffffffffffffffffffffffffffff16145b61086a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108619061320a565b60405180910390fd5b600061087686866116d2565b90506000600a600083815260200190815260200160002054146108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590612fea565b60405180910390fd5b6108d8600961170d565b60006108e46009611723565b90506108f08482611731565b6108fa818661190b565b80600a60008481526020019081526020016000208190555081600b6000838152602001908152602001600020819055508092505050949350505050565b610948610942611611565b8261197f565b610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e9061326a565b60405180910390fd5b610992838383611a5d565b505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6060600860006109fb611611565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610a875750610a51611129565b73ffffffffffffffffffffffffffffffffffffffff16610a6f611611565b73ffffffffffffffffffffffffffffffffffffffff16145b610ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abd9061320a565b60405180910390fd5b83518551148015610ad8575082518451145b610b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0e9061306a565b60405180910390fd5b6000855167ffffffffffffffff811115610b5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b885781602001602082028036833780820191505090505b50905060005b8651811015610cd3576000878281518110610bd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000878381518110610c17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000878481518110610c5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000610c748484848b610791565b905080868681518110610cb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050505050508080610ccb90613677565b915050610b8e565b5080915050949350505050565b610cfb838383604051806020016040528060008152506111fb565b505050565b600080610d0c836115a5565b610d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d429061328a565b60405180910390fd5b6000600b60008581526020019081526020016000205490506000610d7f662386f26fc1000083611cc490919063ffffffff16565b90506000610d9d662386f26fc1000084611cda90919063ffffffff16565b9050818194509450505050915091565b610db5611611565b73ffffffffffffffffffffffffffffffffffffffff16610dd3611129565b73ffffffffffffffffffffffffffffffffffffffff1614610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e20906131ea565b60405180910390fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb788282604051610eb1929190612f62565b60405180910390a15050565b600080610eca84846116d2565b90506000600a6000838152602001908152602001600020549050610eed816115a5565b610f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f239061328a565b60405180910390fd5b809250505092915050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd79061314a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561105a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110519061312a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110a9611611565b73ffffffffffffffffffffffffffffffffffffffff166110c7611129565b73ffffffffffffffffffffffffffffffffffffffff161461111d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611114906131ea565b60405180910390fd5b6111276000611cf0565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461116290613614565b80601f016020809104026020016040519081016040528092919081815260200182805461118e90613614565b80156111db5780601f106111b0576101008083540402835291602001916111db565b820191906000526020600020905b8154815290600101906020018083116111be57829003601f168201915b5050505050905090565b6111f76111f0611611565b8383611db6565b5050565b61120c611206611611565b8361197f565b61124b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112429061326a565b60405180910390fd5b61125784848484611f23565b50505050565b6060611268826115a5565b6112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e906131aa565b60405180910390fd5b60006006600084815260200190815260200160002080546112c790613614565b80601f01602080910402602001604051908101604052809291908181526020018280546112f390613614565b80156113405780601f1061131557610100808354040283529160200191611340565b820191906000526020600020905b81548152906001019060200180831161132357829003601f168201915b505050505090506000611351611f7f565b90506000815114156113675781925050506113aa565b60008251111561139c578082604051602001611384929190612ed7565b604051602081830303815290604052925050506113aa565b6113a584611f96565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61144b611611565b73ffffffffffffffffffffffffffffffffffffffff16611469611129565b73ffffffffffffffffffffffffffffffffffffffff16146114bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b6906131ea565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561152f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115269061302a565b60405180910390fd5b61153881611cf0565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661168c83610f37565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806117016116f2662386f26fc100008661203d90919063ffffffff16565b8461205390919063ffffffff16565b90508091505092915050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117989061318a565b60405180910390fd5b6117aa816115a5565b156117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e19061308a565b60405180910390fd5b6117f660008383612069565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118469190613449565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46119076000838361206e565b5050565b611914826115a5565b611953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194a9061316a565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061197a9291906123da565b505050565b600061198a826115a5565b6119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c0906130ea565b60405180910390fd5b60006119d483610f37565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611a4357508373ffffffffffffffffffffffffffffffffffffffff16611a2b846105f4565b73ffffffffffffffffffffffffffffffffffffffff16145b80611a545750611a5381856113af565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611a7d82610f37565b73ffffffffffffffffffffffffffffffffffffffff1614611ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aca9061304a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3a906130aa565b60405180910390fd5b611b4e838383612069565b611b59600082611619565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ba9919061352a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c009190613449565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611cbf83838361206e565b505050565b60008183611cd2919061349f565b905092915050565b60008183611ce891906136c0565b905092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c906130ca565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611f169190612fad565b60405180910390a3505050565b611f2e848484611a5d565b611f3a84848484612073565b611f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f709061300a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611fa1826115a5565b611fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd79061322a565b60405180910390fd5b6000611fea611f7f565b9050600081511161200a5760405180602001604052806000815250612035565b806120148461220a565b604051602001612025929190612ed7565b6040516020818303038152906040525b915050919050565b6000818361204b91906134d0565b905092915050565b600081836120619190613449565b905092915050565b505050565b505050565b60006120948473ffffffffffffffffffffffffffffffffffffffff166123b7565b156121fd578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026120bd611611565b8786866040518563ffffffff1660e01b81526004016120df9493929190612f16565b602060405180830381600087803b1580156120f957600080fd5b505af192505050801561212a57506040513d601f19601f820116820180604052508101906121279190612977565b60015b6121ad573d806000811461215a576040519150601f19603f3d011682016040523d82523d6000602084013e61215f565b606091505b506000815114156121a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219c9061300a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612202565b600190505b949350505050565b60606000821415612252576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506123b2565b600082905060005b6000821461228457808061226d90613677565b915050600a8261227d919061349f565b915061225a565b60008167ffffffffffffffff8111156122c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122f85781602001600182028036833780820191505090505b5090505b600085146123ab57600182612311919061352a565b9150600a8561232091906136c0565b603061232c9190613449565b60f81b818381518110612368577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856123a4919061349f565b94506122fc565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546123e690613614565b90600052602060002090601f016020900481019282612408576000855561244f565b82601f1061242157805160ff191683800117855561244f565b8280016001018555821561244f579182015b8281111561244e578251825591602001919060010190612433565b5b50905061245c9190612460565b5090565b5b80821115612479576000816000905550600101612461565b5090565b600061249061248b84613313565b6132ee565b905080838252602082019050828560208602820111156124af57600080fd5b60005b858110156124f957813567ffffffffffffffff8111156124d157600080fd5b8086016124de89826126bd565b855260208501945060208401935050506001810190506124b2565b5050509392505050565b60006125166125118461333f565b6132ee565b9050808382526020820190508285602086028201111561253557600080fd5b60005b85811015612565578161254b88826126e7565b845260208401935060208301925050600181019050612538565b5050509392505050565b600061258261257d8461336b565b6132ee565b90508281526020810184848401111561259a57600080fd5b6125a58482856135d2565b509392505050565b60006125c06125bb8461339c565b6132ee565b9050828152602081018484840111156125d857600080fd5b6125e38482856135d2565b509392505050565b6000813590506125fa81613d7e565b92915050565b600082601f83011261261157600080fd5b813561262184826020860161247d565b91505092915050565b600082601f83011261263b57600080fd5b813561264b848260208601612503565b91505092915050565b60008135905061266381613d95565b92915050565b60008135905061267881613dac565b92915050565b60008151905061268d81613dac565b92915050565b600082601f8301126126a457600080fd5b81356126b484826020860161256f565b91505092915050565b600082601f8301126126ce57600080fd5b81356126de8482602086016125ad565b91505092915050565b6000813590506126f681613dc3565b92915050565b60006020828403121561270e57600080fd5b600061271c848285016125eb565b91505092915050565b6000806040838503121561273857600080fd5b6000612746858286016125eb565b9250506020612757858286016125eb565b9150509250929050565b60008060006060848603121561277657600080fd5b6000612784868287016125eb565b9350506020612795868287016125eb565b92505060406127a6868287016126e7565b9150509250925092565b600080600080608085870312156127c657600080fd5b60006127d4878288016125eb565b94505060206127e5878288016125eb565b93505060406127f6878288016126e7565b925050606085013567ffffffffffffffff81111561281357600080fd5b61281f87828801612693565b91505092959194509250565b6000806040838503121561283e57600080fd5b600061284c858286016125eb565b925050602061285d85828601612654565b9150509250929050565b6000806040838503121561287a57600080fd5b6000612888858286016125eb565b9250506020612899858286016126e7565b9150509250929050565b600080600080608085870312156128b957600080fd5b600085013567ffffffffffffffff8111156128d357600080fd5b6128df8782880161262a565b945050602085013567ffffffffffffffff8111156128fc57600080fd5b6129088782880161262a565b935050604085013567ffffffffffffffff81111561292557600080fd5b61293187828801612600565b9250506060612942878288016125eb565b91505092959194509250565b60006020828403121561296057600080fd5b600061296e84828501612669565b91505092915050565b60006020828403121561298957600080fd5b60006129978482850161267e565b91505092915050565b6000602082840312156129b257600080fd5b60006129c0848285016126e7565b91505092915050565b600080604083850312156129dc57600080fd5b60006129ea858286016126e7565b92505060206129fb858286016126e7565b9150509250929050565b60008060008060808587031215612a1b57600080fd5b6000612a29878288016126e7565b9450506020612a3a878288016126e7565b935050604085013567ffffffffffffffff811115612a5757600080fd5b612a63878288016126bd565b9250506060612a74878288016125eb565b91505092959194509250565b6000612a8c8383612eb9565b60208301905092915050565b612aa18161355e565b82525050565b6000612ab2826133dd565b612abc818561340b565b9350612ac7836133cd565b8060005b83811015612af8578151612adf8882612a80565b9750612aea836133fe565b925050600181019050612acb565b5085935050505092915050565b612b0e81613570565b82525050565b6000612b1f826133e8565b612b29818561341c565b9350612b398185602086016135e1565b612b42816137ad565b840191505092915050565b6000612b58826133f3565b612b62818561342d565b9350612b728185602086016135e1565b612b7b816137ad565b840191505092915050565b6000612b91826133f3565b612b9b818561343e565b9350612bab8185602086016135e1565b80840191505092915050565b6000612bc4601c8361342d565b9150612bcf826137be565b602082019050919050565b6000612be760328361342d565b9150612bf2826137e7565b604082019050919050565b6000612c0a60268361342d565b9150612c1582613836565b604082019050919050565b6000612c2d60258361342d565b9150612c3882613885565b604082019050919050565b6000612c5060168361342d565b9150612c5b826138d4565b602082019050919050565b6000612c73601c8361342d565b9150612c7e826138fd565b602082019050919050565b6000612c9660248361342d565b9150612ca182613926565b604082019050919050565b6000612cb960198361342d565b9150612cc482613975565b602082019050919050565b6000612cdc602c8361342d565b9150612ce78261399e565b604082019050919050565b6000612cff60388361342d565b9150612d0a826139ed565b604082019050919050565b6000612d22602a8361342d565b9150612d2d82613a3c565b604082019050919050565b6000612d4560298361342d565b9150612d5082613a8b565b604082019050919050565b6000612d68602e8361342d565b9150612d7382613ada565b604082019050919050565b6000612d8b60208361342d565b9150612d9682613b29565b602082019050919050565b6000612dae60318361342d565b9150612db982613b52565b604082019050919050565b6000612dd1602c8361342d565b9150612ddc82613ba1565b604082019050919050565b6000612df460208361342d565b9150612dff82613bf0565b602082019050919050565b6000612e1760218361342d565b9150612e2282613c19565b604082019050919050565b6000612e3a602f8361342d565b9150612e4582613c68565b604082019050919050565b6000612e5d60218361342d565b9150612e6882613cb7565b604082019050919050565b6000612e8060318361342d565b9150612e8b82613d06565b604082019050919050565b6000612ea360128361342d565b9150612eae82613d55565b602082019050919050565b612ec2816135c8565b82525050565b612ed1816135c8565b82525050565b6000612ee38285612b86565b9150612eef8284612b86565b91508190509392505050565b6000602082019050612f106000830184612a98565b92915050565b6000608082019050612f2b6000830187612a98565b612f386020830186612a98565b612f456040830185612ec8565b8181036060830152612f578184612b14565b905095945050505050565b6000604082019050612f776000830185612a98565b612f846020830184612b05565b9392505050565b60006020820190508181036000830152612fa58184612aa7565b905092915050565b6000602082019050612fc26000830184612b05565b92915050565b60006020820190508181036000830152612fe28184612b4d565b905092915050565b6000602082019050818103600083015261300381612bb7565b9050919050565b6000602082019050818103600083015261302381612bda565b9050919050565b6000602082019050818103600083015261304381612bfd565b9050919050565b6000602082019050818103600083015261306381612c20565b9050919050565b6000602082019050818103600083015261308381612c43565b9050919050565b600060208201905081810360008301526130a381612c66565b9050919050565b600060208201905081810360008301526130c381612c89565b9050919050565b600060208201905081810360008301526130e381612cac565b9050919050565b6000602082019050818103600083015261310381612ccf565b9050919050565b6000602082019050818103600083015261312381612cf2565b9050919050565b6000602082019050818103600083015261314381612d15565b9050919050565b6000602082019050818103600083015261316381612d38565b9050919050565b6000602082019050818103600083015261318381612d5b565b9050919050565b600060208201905081810360008301526131a381612d7e565b9050919050565b600060208201905081810360008301526131c381612da1565b9050919050565b600060208201905081810360008301526131e381612dc4565b9050919050565b6000602082019050818103600083015261320381612de7565b9050919050565b6000602082019050818103600083015261322381612e0a565b9050919050565b6000602082019050818103600083015261324381612e2d565b9050919050565b6000602082019050818103600083015261326381612e50565b9050919050565b6000602082019050818103600083015261328381612e73565b9050919050565b600060208201905081810360008301526132a381612e96565b9050919050565b60006020820190506132bf6000830184612ec8565b92915050565b60006040820190506132da6000830185612ec8565b6132e76020830184612ec8565b9392505050565b60006132f8613309565b90506133048282613646565b919050565b6000604051905090565b600067ffffffffffffffff82111561332e5761332d61377e565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561335a5761335961377e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156133865761338561377e565b5b61338f826137ad565b9050602081019050919050565b600067ffffffffffffffff8211156133b7576133b661377e565b5b6133c0826137ad565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613454826135c8565b915061345f836135c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613494576134936136f1565b5b828201905092915050565b60006134aa826135c8565b91506134b5836135c8565b9250826134c5576134c4613720565b5b828204905092915050565b60006134db826135c8565b91506134e6836135c8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561351f5761351e6136f1565b5b828202905092915050565b6000613535826135c8565b9150613540836135c8565b925082821015613553576135526136f1565b5b828203905092915050565b6000613569826135a8565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156135ff5780820151818401526020810190506135e4565b8381111561360e576000848401525b50505050565b6000600282049050600182168061362c57607f821691505b602082108114156136405761363f61374f565b5b50919050565b61364f826137ad565b810181811067ffffffffffffffff8211171561366e5761366d61377e565b5b80604052505050565b6000613682826135c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156136b5576136b46136f1565b5b600182019050919050565b60006136cb826135c8565b91506136d6836135c8565b9250826136e6576136e5613720565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e465420666f72207b782c797d20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f506172616d73206c656e677468206d69736d6174636800000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616c6c657220646f6573206e6f7420686176652041646d696e20416363657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e465420646f6573206e6f742065786973740000000000000000000000000000600082015250565b613d878161355e565b8114613d9257600080fd5b50565b613d9e81613570565b8114613da957600080fd5b50565b613db58161357c565b8114613dc057600080fd5b50565b613dcc816135c8565b8114613dd757600080fd5b5056fea26469706673582212207b9a746774c4a9a9327111c89dea918419a970b442fc3cf2ea868445bfa47a0d64736f6c63430008040033",
}

// MainABI is the input ABI used to generate the binding from.
// Deprecated: Use MainMetaData.ABI instead.
var MainABI = MainMetaData.ABI

// MainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MainMetaData.Bin instead.
var MainBin = MainMetaData.Bin

// DeployMain deploys a new Ethereum contract, binding an instance of Main to it.
func DeployMain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Main, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// Main is an auto generated Go binding around an Ethereum contract.
type Main struct {
	MainCaller     // Read-only binding to the contract
	MainTransactor // Write-only binding to the contract
	MainFilterer   // Log filterer for contract events
}

// MainCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainSession struct {
	Contract     *Main             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainCallerSession struct {
	Contract *MainCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainTransactorSession struct {
	Contract     *MainTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainRaw struct {
	Contract *Main // Generic contract binding to access the raw methods on
}

// MainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainCallerRaw struct {
	Contract *MainCaller // Generic read-only contract binding to access the raw methods on
}

// MainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainTransactorRaw struct {
	Contract *MainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMain creates a new instance of Main, bound to a specific deployed contract.
func NewMain(address common.Address, backend bind.ContractBackend) (*Main, error) {
	contract, err := bindMain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// NewMainCaller creates a new read-only instance of Main, bound to a specific deployed contract.
func NewMainCaller(address common.Address, caller bind.ContractCaller) (*MainCaller, error) {
	contract, err := bindMain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainCaller{contract: contract}, nil
}

// NewMainTransactor creates a new write-only instance of Main, bound to a specific deployed contract.
func NewMainTransactor(address common.Address, transactor bind.ContractTransactor) (*MainTransactor, error) {
	contract, err := bindMain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainTransactor{contract: contract}, nil
}

// NewMainFilterer creates a new log filterer instance of Main, bound to a specific deployed contract.
func NewMainFilterer(address common.Address, filterer bind.ContractFilterer) (*MainFilterer, error) {
	contract, err := bindMain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainFilterer{contract: contract}, nil
}

// bindMain binds a generic wrapper to an already deployed contract.
func bindMain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.MainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Main *MainCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Main *MainSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Main.Contract.BalanceOf(&_Main.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Main *MainCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Main.Contract.BalanceOf(&_Main.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Main *MainCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Main *MainSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Main.Contract.GetApproved(&_Main.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Main *MainCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Main.Contract.GetApproved(&_Main.CallOpts, tokenId)
}

// GetCoordinatesFromId is a free data retrieval call binding the contract method 0x43c33276.
//
// Solidity: function getCoordinatesFromId(uint256 id) view returns(uint256, uint256)
func (_Main *MainCaller) GetCoordinatesFromId(opts *bind.CallOpts, id *big.Int) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getCoordinatesFromId", id)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetCoordinatesFromId is a free data retrieval call binding the contract method 0x43c33276.
//
// Solidity: function getCoordinatesFromId(uint256 id) view returns(uint256, uint256)
func (_Main *MainSession) GetCoordinatesFromId(id *big.Int) (*big.Int, *big.Int, error) {
	return _Main.Contract.GetCoordinatesFromId(&_Main.CallOpts, id)
}

// GetCoordinatesFromId is a free data retrieval call binding the contract method 0x43c33276.
//
// Solidity: function getCoordinatesFromId(uint256 id) view returns(uint256, uint256)
func (_Main *MainCallerSession) GetCoordinatesFromId(id *big.Int) (*big.Int, *big.Int, error) {
	return _Main.Contract.GetCoordinatesFromId(&_Main.CallOpts, id)
}

// GetIdFromCoordinates is a free data retrieval call binding the contract method 0x62acf799.
//
// Solidity: function getIdFromCoordinates(uint256 x, uint256 y) view returns(uint256)
func (_Main *MainCaller) GetIdFromCoordinates(opts *bind.CallOpts, x *big.Int, y *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getIdFromCoordinates", x, y)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetIdFromCoordinates is a free data retrieval call binding the contract method 0x62acf799.
//
// Solidity: function getIdFromCoordinates(uint256 x, uint256 y) view returns(uint256)
func (_Main *MainSession) GetIdFromCoordinates(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Main.Contract.GetIdFromCoordinates(&_Main.CallOpts, x, y)
}

// GetIdFromCoordinates is a free data retrieval call binding the contract method 0x62acf799.
//
// Solidity: function getIdFromCoordinates(uint256 x, uint256 y) view returns(uint256)
func (_Main *MainCallerSession) GetIdFromCoordinates(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Main.Contract.GetIdFromCoordinates(&_Main.CallOpts, x, y)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address admin) view returns(bool)
func (_Main *MainCaller) IsAdmin(opts *bind.CallOpts, admin common.Address) (bool, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "isAdmin", admin)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address admin) view returns(bool)
func (_Main *MainSession) IsAdmin(admin common.Address) (bool, error) {
	return _Main.Contract.IsAdmin(&_Main.CallOpts, admin)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address admin) view returns(bool)
func (_Main *MainCallerSession) IsAdmin(admin common.Address) (bool, error) {
	return _Main.Contract.IsAdmin(&_Main.CallOpts, admin)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Main *MainCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Main *MainSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Main.Contract.IsApprovedForAll(&_Main.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Main *MainCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Main.Contract.IsApprovedForAll(&_Main.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Main *MainCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Main *MainSession) Name() (string, error) {
	return _Main.Contract.Name(&_Main.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Main *MainCallerSession) Name() (string, error) {
	return _Main.Contract.Name(&_Main.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainSession) Owner() (common.Address, error) {
	return _Main.Contract.Owner(&_Main.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainCallerSession) Owner() (common.Address, error) {
	return _Main.Contract.Owner(&_Main.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Main *MainCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Main *MainSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Main.Contract.OwnerOf(&_Main.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Main *MainCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Main.Contract.OwnerOf(&_Main.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Main *MainCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Main *MainSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Main.Contract.SupportsInterface(&_Main.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Main *MainCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Main.Contract.SupportsInterface(&_Main.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Main *MainCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Main *MainSession) Symbol() (string, error) {
	return _Main.Contract.Symbol(&_Main.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Main *MainCallerSession) Symbol() (string, error) {
	return _Main.Contract.Symbol(&_Main.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Main *MainCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Main *MainSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Main.Contract.TokenURI(&_Main.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Main *MainCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Main.Contract.TokenURI(&_Main.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Main *MainTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Main *MainSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Approve(&_Main.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Main *MainTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.Approve(&_Main.TransactOpts, to, tokenId)
}

// BatchMintLand is a paid mutator transaction binding the contract method 0x37eee4e8.
//
// Solidity: function batchMintLand(uint256[] x, uint256[] y, string[] data, address _to) returns(uint256[])
func (_Main *MainTransactor) BatchMintLand(opts *bind.TransactOpts, x []*big.Int, y []*big.Int, data []string, _to common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "batchMintLand", x, y, data, _to)
}

// BatchMintLand is a paid mutator transaction binding the contract method 0x37eee4e8.
//
// Solidity: function batchMintLand(uint256[] x, uint256[] y, string[] data, address _to) returns(uint256[])
func (_Main *MainSession) BatchMintLand(x []*big.Int, y []*big.Int, data []string, _to common.Address) (*types.Transaction, error) {
	return _Main.Contract.BatchMintLand(&_Main.TransactOpts, x, y, data, _to)
}

// BatchMintLand is a paid mutator transaction binding the contract method 0x37eee4e8.
//
// Solidity: function batchMintLand(uint256[] x, uint256[] y, string[] data, address _to) returns(uint256[])
func (_Main *MainTransactorSession) BatchMintLand(x []*big.Int, y []*big.Int, data []string, _to common.Address) (*types.Transaction, error) {
	return _Main.Contract.BatchMintLand(&_Main.TransactOpts, x, y, data, _to)
}

// MintLand is a paid mutator transaction binding the contract method 0x15300b79.
//
// Solidity: function mintLand(uint256 x, uint256 y, string data, address _to) returns(uint256)
func (_Main *MainTransactor) MintLand(opts *bind.TransactOpts, x *big.Int, y *big.Int, data string, _to common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "mintLand", x, y, data, _to)
}

// MintLand is a paid mutator transaction binding the contract method 0x15300b79.
//
// Solidity: function mintLand(uint256 x, uint256 y, string data, address _to) returns(uint256)
func (_Main *MainSession) MintLand(x *big.Int, y *big.Int, data string, _to common.Address) (*types.Transaction, error) {
	return _Main.Contract.MintLand(&_Main.TransactOpts, x, y, data, _to)
}

// MintLand is a paid mutator transaction binding the contract method 0x15300b79.
//
// Solidity: function mintLand(uint256 x, uint256 y, string data, address _to) returns(uint256)
func (_Main *MainTransactorSession) MintLand(x *big.Int, y *big.Int, data string, _to common.Address) (*types.Transaction, error) {
	return _Main.Contract.MintLand(&_Main.TransactOpts, x, y, data, _to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainSession) RenounceOwnership() (*types.Transaction, error) {
	return _Main.Contract.RenounceOwnership(&_Main.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Main.Contract.RenounceOwnership(&_Main.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Main *MainTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Main *MainSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.SafeTransferFrom(&_Main.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Main *MainTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.SafeTransferFrom(&_Main.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Main *MainTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Main *MainSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Main.Contract.SafeTransferFrom0(&_Main.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Main *MainTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Main.Contract.SafeTransferFrom0(&_Main.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool enabled) returns()
func (_Main *MainTransactor) SetAdmin(opts *bind.TransactOpts, admin common.Address, enabled bool) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "setAdmin", admin, enabled)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool enabled) returns()
func (_Main *MainSession) SetAdmin(admin common.Address, enabled bool) (*types.Transaction, error) {
	return _Main.Contract.SetAdmin(&_Main.TransactOpts, admin, enabled)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool enabled) returns()
func (_Main *MainTransactorSession) SetAdmin(admin common.Address, enabled bool) (*types.Transaction, error) {
	return _Main.Contract.SetAdmin(&_Main.TransactOpts, admin, enabled)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Main *MainTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Main *MainSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Main.Contract.SetApprovalForAll(&_Main.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Main *MainTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Main.Contract.SetApprovalForAll(&_Main.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Main *MainTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Main *MainSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.TransferFrom(&_Main.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Main *MainTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.TransferFrom(&_Main.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Main.Contract.TransferOwnership(&_Main.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Main.Contract.TransferOwnership(&_Main.TransactOpts, newOwner)
}

// MainAdminAccessSetIterator is returned from FilterAdminAccessSet and is used to iterate over the raw logs and unpacked data for AdminAccessSet events raised by the Main contract.
type MainAdminAccessSetIterator struct {
	Event *MainAdminAccessSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainAdminAccessSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainAdminAccessSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainAdminAccessSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainAdminAccessSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainAdminAccessSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainAdminAccessSet represents a AdminAccessSet event raised by the Main contract.
type MainAdminAccessSet struct {
	Admin   common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAdminAccessSet is a free log retrieval operation binding the contract event 0xe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb78.
//
// Solidity: event AdminAccessSet(address _admin, bool _enabled)
func (_Main *MainFilterer) FilterAdminAccessSet(opts *bind.FilterOpts) (*MainAdminAccessSetIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "AdminAccessSet")
	if err != nil {
		return nil, err
	}
	return &MainAdminAccessSetIterator{contract: _Main.contract, event: "AdminAccessSet", logs: logs, sub: sub}, nil
}

// WatchAdminAccessSet is a free log subscription operation binding the contract event 0xe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb78.
//
// Solidity: event AdminAccessSet(address _admin, bool _enabled)
func (_Main *MainFilterer) WatchAdminAccessSet(opts *bind.WatchOpts, sink chan<- *MainAdminAccessSet) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "AdminAccessSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainAdminAccessSet)
				if err := _Main.contract.UnpackLog(event, "AdminAccessSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminAccessSet is a log parse operation binding the contract event 0xe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb78.
//
// Solidity: event AdminAccessSet(address _admin, bool _enabled)
func (_Main *MainFilterer) ParseAdminAccessSet(log types.Log) (*MainAdminAccessSet, error) {
	event := new(MainAdminAccessSet)
	if err := _Main.contract.UnpackLog(event, "AdminAccessSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Main contract.
type MainApprovalIterator struct {
	Event *MainApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainApproval represents a Approval event raised by the Main contract.
type MainApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Main *MainFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*MainApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainApprovalIterator{contract: _Main.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Main *MainFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MainApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainApproval)
				if err := _Main.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Main *MainFilterer) ParseApproval(log types.Log) (*MainApproval, error) {
	event := new(MainApproval)
	if err := _Main.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Main contract.
type MainApprovalForAllIterator struct {
	Event *MainApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainApprovalForAll represents a ApprovalForAll event raised by the Main contract.
type MainApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Main *MainFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*MainApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &MainApprovalForAllIterator{contract: _Main.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Main *MainFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *MainApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainApprovalForAll)
				if err := _Main.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Main *MainFilterer) ParseApprovalForAll(log types.Log) (*MainApprovalForAll, error) {
	event := new(MainApprovalForAll)
	if err := _Main.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Main contract.
type MainOwnershipTransferredIterator struct {
	Event *MainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainOwnershipTransferred represents a OwnershipTransferred event raised by the Main contract.
type MainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MainOwnershipTransferredIterator{contract: _Main.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainOwnershipTransferred)
				if err := _Main.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) ParseOwnershipTransferred(log types.Log) (*MainOwnershipTransferred, error) {
	event := new(MainOwnershipTransferred)
	if err := _Main.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Main contract.
type MainTransferIterator struct {
	Event *MainTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainTransfer represents a Transfer event raised by the Main contract.
type MainTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Main *MainFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*MainTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MainTransferIterator{contract: _Main.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Main *MainFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MainTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainTransfer)
				if err := _Main.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Main *MainFilterer) ParseTransfer(log types.Log) (*MainTransfer, error) {
	event := new(MainTransfer)
	if err := _Main.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
