// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sale_contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LandSaleSale is an auto generated low-level Go binding around an user-defined struct.
type LandSaleSale struct {
	Price    *big.Int
	Owner    common.Address
	IsActive bool
}

// MainMetaData contains all meta data concerning the Main contract.
var MainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"AdminAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Gift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SaleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_cancelledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawFunds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"contractIERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"batchSellProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"structLandSale.Sale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"purchaseProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"batchPurchaseProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003301380380620033018339818101604052810190620000379190620002cb565b620000576200004b620001c560201b60201c565b620001cd60201b60201c565b60016002819055506200008b8273ffffffffffffffffffffffffffffffffffffffff166200029160201b62001c011760201c565b620000cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c4906200037c565b60405180910390fd5b620000f98173ffffffffffffffffffffffffffffffffffffffff166200029160201b62001c011760201c565b6200013b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000132906200035a565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200044f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081519050620002c58162000435565b92915050565b60008060408385031215620002df57600080fd5b6000620002ef85828601620002b4565b92505060206200030285828601620002b4565b9150509250929050565b60006200031b6020836200039e565b91506200032882620003e3565b602082019050919050565b600062000342601e836200039e565b91506200034f826200040c565b602082019050919050565b6000602082019050818103600083015262000375816200030c565b9050919050565b60006020820190508181036000830152620003978162000333565b9050919050565b600082825260208201905092915050565b6000620003bc82620003c3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f5f746f6b656e41646472657373206d757374206265206120636f6e7472616374600082015250565b7f5f6e667441646472657373206d757374206265206120636f6e74726163740000600082015250565b6200044081620003af565b81146200044c57600080fd5b50565b612ea2806200045f6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806382367b2d116100ad578063bd94b00511610071578063bd94b00514610294578063d8f6d596146102b0578063ebe1c149146102e0578063ed46a8cf146102fc578063f2fde38b1461031857610121565b806382367b2d1461021657806382bfefc8146102325780638d8f2adb146102505780638da5cb5b1461025a578063aed380151461027857610121565b8063715018a6116100f4578063715018a6146101ac5780637362377b146101b657806379d9c439146101c05780637c0b8de2146101dc5780637ddbd58f146101fa57610121565b806324d7806c14610126578063328d8f72146101565780634b0bddd2146101725780636aa633b61461018e575b600080fd5b610140600480360381019061013b919061210e565b610334565b60405161014d9190612661565b60405180910390f35b610170600480360381019061016b9190612249565b61038a565b005b61018c60048036038101906101879190612160565b610423565b005b610196610533565b6040516101a39190612661565b60405180910390f35b6101b4610546565b005b6101be6105ce565b005b6101da60048036038101906101d5919061229b565b610699565b005b6101e4610748565b6040516101f19190612697565b60405180910390f35b610214600480360381019061020f919061219c565b61076e565b005b610230600480360381019061022b9190612329565b610883565b005b61023a610b40565b604051610247919061267c565b60405180910390f35b610258610b66565b005b610262610e6a565b60405161026f91906125e6565b60405180910390f35b610292600480360381019061028d91906122ed565b610e93565b005b6102ae60048036038101906102a9919061229b565b611095565b005b6102ca60048036038101906102c5919061229b565b6113f3565b6040516102d79190612852565b60405180910390f35b6102fa60048036038101906102f591906121dd565b6114fe565b005b61031660048036038101906103119190612329565b611694565b005b610332600480360381019061032d919061210e565b611b09565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610392611c24565b73ffffffffffffffffffffffffffffffffffffffff166103b0610e6a565b73ffffffffffffffffffffffffffffffffffffffff1614610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90612792565b60405180910390fd5b80600460146101000a81548160ff02191690831515021790555050565b61042b611c24565b73ffffffffffffffffffffffffffffffffffffffff16610449610e6a565b73ffffffffffffffffffffffffffffffffffffffff161461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049690612792565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb788282604051610527929190612638565b60405180910390a15050565b600460149054906101000a900460ff1681565b61054e611c24565b73ffffffffffffffffffffffffffffffffffffffff1661056c610e6a565b73ffffffffffffffffffffffffffffffffffffffff16146105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b990612792565b60405180910390fd5b6105cc6000611c2c565b565b6105d6611c24565b73ffffffffffffffffffffffffffffffffffffffff166105f4610e6a565b73ffffffffffffffffffffffffffffffffffffffff161461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190612792565b60405180910390fd5b60004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610695573d6000803e3d6000fd5b5050565b600460149054906101000a900460ff166106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df90612772565b60405180910390fd5b60028054141561072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072490612832565b60405180910390fd5b6002808190555061073d81611cf0565b600160028190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff166107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490612772565b60405180910390fd5b600280541415610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f990612832565b60405180910390fd5b6002808190555060005b8151811015610877576000828281518110610850577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905061086381611cf0565b50808061086f90612ae8565b91505061080c565b50600160028190555050565b6005600083815260200190815260200160002060010160149054906101000a900460ff166108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906127b2565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a3c5761096061095b611c24565b610334565b806109a4575061096e610e6a565b73ffffffffffffffffffffffffffffffffffffffff1661098c611c24565b73ffffffffffffffffffffffffffffffffffffffff16145b6109e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109da90612812565b60405180910390fd5b8060056000848152602001908152602001600020600001819055507f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd6968388282604051610a2f929190612904565b60405180910390a1610b3c565b610a44611c24565b73ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade906127d2565b60405180910390fd5b8060056000848152602001908152602001600020600001819055507f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd6968388282604051610b33929190612904565b60405180910390a15b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b6e611c24565b73ffffffffffffffffffffffffffffffffffffffff16610b8c610e6a565b73ffffffffffffffffffffffffffffffffffffffff1614610be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd990612792565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c3f91906125e6565b60206040518083038186803b158015610c5757600080fd5b505afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f91906122c4565b11610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc6906126d2565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2c91906125e6565b60206040518083038186803b158015610d4457600080fd5b505afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c91906122c4565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610ddd93929190612601565b602060405180830381600087803b158015610df757600080fd5b505af1158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190612272565b507fc67387b8229e689a6f1e2c3feafcfae2206a4d6e581bf95e25dbb0c934432a6481604051610e5f919061286d565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e9b611c24565b73ffffffffffffffffffffffffffffffffffffffff16610eb9610e6a565b73ffffffffffffffffffffffffffffffffffffffff1614610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0690612792565b60405180910390fd5b600280541415610f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4b90612832565b60405180910390fd5b600280819055506005600083815260200190815260200160002060010160149054906101000a900460ff1615610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb690612712565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3083856040518463ffffffff1660e01b815260040161101e93929190612601565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b505050507faf8063240d3bff004c7c1831485d9f8dd5f0b311092da3ef6295b7e6fefb6d088282604051611081929190612888565b60405180910390a160016002819055505050565b61109d611c24565b73ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806111185750611117611112611c24565b610334565b5b8061115c5750611126610e6a565b73ffffffffffffffffffffffffffffffffffffffff16611144611c24565b73ffffffffffffffffffffffffffffffffffffffff16145b61119b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119290612752565b60405180910390fd5b6005600082815260200190815260200160002060010160149054906101000a900460ff166111fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f590612732565b60405180910390fd5b60006005600083815260200190815260200160002060010160146101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461135e57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd306005600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b815260040161132b93929190612601565b600060405180830381600087803b15801561134557600080fd5b505af1158015611359573d6000803e3d6000fd5b505050505b7fb7cfc6175ad793ef8751b7deb32917c22f292c84ecd4ca57beabef3ed6bc8bdb8160056000848152602001908152602001600020600001546005600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113d6611c24565b426040516113e895949392919061292d565b60405180910390a150565b6113fb611fc1565b6005600083815260200190815260200160002060010160149054906101000a900460ff1661145e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145590612732565b60405180910390fd5b60056000838152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815250509050919050565b8051825114611542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611539906127f2565b60405180910390fd5b60005b825181101561168f576005600084838151811061158b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060010160149054906101000a900460ff16156115f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e990612712565b60405180910390fd5b61167c83828151811061162e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183838151811061166f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611694565b808061168790612ae8565b915050611545565b505050565b6005600083815260200190815260200160002060010160149054906101000a900460ff16156116f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ef90612712565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161176a919061286d565b60206040518083038186803b15801561178257600080fd5b505afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba9190612137565b73ffffffffffffffffffffffffffffffffffffffff161415611966576117e66117e1611c24565b610334565b8061182a57506117f4610e6a565b73ffffffffffffffffffffffffffffffffffffffff16611812611c24565b73ffffffffffffffffffffffffffffffffffffffff16145b611869576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611860906126b2565b60405180910390fd5b60405180606001604052808281526020013073ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250600560008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055509050507ff59a8e57322d4e7e909b00d06e23797136706d0039f6df9bc2eed74a829b9489828230426040516119599493929190612980565b60405180910390a1611b05565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6119ac611c24565b30856040518463ffffffff1660e01b81526004016119cc93929190612601565b600060405180830381600087803b1580156119e657600080fd5b505af11580156119fa573d6000803e3d6000fd5b505050506040518060600160405280828152602001611a17611c24565b73ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250600560008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055509050507ff59a8e57322d4e7e909b00d06e23797136706d0039f6df9bc2eed74a829b94898282611aeb611c24565b42604051611afc9493929190612980565b60405180910390a15b5050565b611b11611c24565b73ffffffffffffffffffffffffffffffffffffffff16611b2f610e6a565b73ffffffffffffffffffffffffffffffffffffffff1614611b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7c90612792565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bec906126f2565b60405180910390fd5b611bfe81611c2c565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6005600082815260200190815260200160002060010160149054906101000a900460ff16611d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4a906127b2565b60405180910390fd5b60006005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000611d98611c24565b9050600060056000858152602001908152602001600020600001549050816005600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006005600086815260200190815260200160002060010160146101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8385846040518463ffffffff1660e01b8152600401611e9893929190612601565b602060405180830381600087803b158015611eb257600080fd5b505af1158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea9190612272565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3084876040518463ffffffff1660e01b8152600401611f4a93929190612601565b600060405180830381600087803b158015611f6457600080fd5b505af1158015611f78573d6000803e3d6000fd5b505050507fa70b1a854695e7921b122988e216d3a6cd10ed799017c67b1ff231967e6bf56d8484848442604051611fb39594939291906128b1565b60405180910390a150505050565b604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600061200d612008846129ea565b6129c5565b9050808382526020820190508285602086028201111561202c57600080fd5b60005b8581101561205c578161204288826120e4565b84526020840193506020830192505060018101905061202f565b5050509392505050565b60008135905061207581612e27565b92915050565b60008151905061208a81612e27565b92915050565b600082601f8301126120a157600080fd5b81356120b1848260208601611ffa565b91505092915050565b6000813590506120c981612e3e565b92915050565b6000815190506120de81612e3e565b92915050565b6000813590506120f381612e55565b92915050565b60008151905061210881612e55565b92915050565b60006020828403121561212057600080fd5b600061212e84828501612066565b91505092915050565b60006020828403121561214957600080fd5b60006121578482850161207b565b91505092915050565b6000806040838503121561217357600080fd5b600061218185828601612066565b9250506020612192858286016120ba565b9150509250929050565b6000602082840312156121ae57600080fd5b600082013567ffffffffffffffff8111156121c857600080fd5b6121d484828501612090565b91505092915050565b600080604083850312156121f057600080fd5b600083013567ffffffffffffffff81111561220a57600080fd5b61221685828601612090565b925050602083013567ffffffffffffffff81111561223357600080fd5b61223f85828601612090565b9150509250929050565b60006020828403121561225b57600080fd5b6000612269848285016120ba565b91505092915050565b60006020828403121561228457600080fd5b6000612292848285016120cf565b91505092915050565b6000602082840312156122ad57600080fd5b60006122bb848285016120e4565b91505092915050565b6000602082840312156122d657600080fd5b60006122e4848285016120f9565b91505092915050565b6000806040838503121561230057600080fd5b600061230e858286016120e4565b925050602061231f85828601612066565b9150509250929050565b6000806040838503121561233c57600080fd5b600061234a858286016120e4565b925050602061235b858286016120e4565b9150509250929050565b61236e81612a27565b82525050565b61237d81612a27565b82525050565b61238c81612a39565b82525050565b61239b81612a39565b82525050565b6123aa81612a6f565b82525050565b6123b981612a93565b82525050565b60006123cc602583612a16565b91506123d782612ba0565b604082019050919050565b60006123ef601383612a16565b91506123fa82612bef565b602082019050919050565b6000612412602683612a16565b915061241d82612c18565b604082019050919050565b6000612435601283612a16565b915061244082612c67565b602082019050919050565b6000612458601683612a16565b915061246382612c90565b602082019050919050565b600061247b602083612a16565b915061248682612cb9565b602082019050919050565b600061249e601383612a16565b91506124a982612ce2565b602082019050919050565b60006124c1602083612a16565b91506124cc82612d0b565b602082019050919050565b60006124e4601383612a16565b91506124ef82612d34565b602082019050919050565b6000612507601c83612a16565b915061251282612d5d565b602082019050919050565b600061252a600f83612a16565b915061253582612d86565b602082019050919050565b600061254d602183612a16565b915061255882612daf565b604082019050919050565b6000612570601f83612a16565b915061257b82612dfe565b602082019050919050565b60608201600082015161259c60008501826125c8565b5060208201516125af6020850182612365565b5060408201516125c26040850182612383565b50505050565b6125d181612a65565b82525050565b6125e081612a65565b82525050565b60006020820190506125fb6000830184612374565b92915050565b60006060820190506126166000830186612374565b6126236020830185612374565b61263060408301846125d7565b949350505050565b600060408201905061264d6000830185612374565b61265a6020830184612392565b9392505050565b60006020820190506126766000830184612392565b92915050565b600060208201905061269160008301846123a1565b92915050565b60006020820190506126ac60008301846123b0565b92915050565b600060208201905081810360008301526126cb816123bf565b9050919050565b600060208201905081810360008301526126eb816123e2565b9050919050565b6000602082019050818103600083015261270b81612405565b9050919050565b6000602082019050818103600083015261272b81612428565b9050919050565b6000602082019050818103600083015261274b8161244b565b9050919050565b6000602082019050818103600083015261276b8161246e565b9050919050565b6000602082019050818103600083015261278b81612491565b9050919050565b600060208201905081810360008301526127ab816124b4565b9050919050565b600060208201905081810360008301526127cb816124d7565b9050919050565b600060208201905081810360008301526127eb816124fa565b9050919050565b6000602082019050818103600083015261280b8161251d565b9050919050565b6000602082019050818103600083015261282b81612540565b9050919050565b6000602082019050818103600083015261284b81612563565b9050919050565b60006060820190506128676000830184612586565b92915050565b600060208201905061288260008301846125d7565b92915050565b600060408201905061289d60008301856125d7565b6128aa6020830184612374565b9392505050565b600060a0820190506128c660008301886125d7565b6128d36020830187612374565b6128e06040830186612374565b6128ed60608301856125d7565b6128fa60808301846125d7565b9695505050505050565b600060408201905061291960008301856125d7565b61292660208301846125d7565b9392505050565b600060a08201905061294260008301886125d7565b61294f60208301876125d7565b61295c6040830186612374565b6129696060830185612374565b61297660808301846125d7565b9695505050505050565b600060808201905061299560008301876125d7565b6129a260208301866125d7565b6129af6040830185612374565b6129bc60608301846125d7565b95945050505050565b60006129cf6129e0565b90506129db8282612ab7565b919050565b6000604051905090565b600067ffffffffffffffff821115612a0557612a04612b60565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000612a3282612a45565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612a7a82612a81565b9050919050565b6000612a8c82612a45565b9050919050565b6000612a9e82612aa5565b9050919050565b6000612ab082612a45565b9050919050565b612ac082612b8f565b810181811067ffffffffffffffff82111715612adf57612ade612b60565b5b80604052505050565b6000612af382612a65565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b2657612b25612b31565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f6e6c79206f776e6572206f722061646d696e2063616e2073656c6c2070726f60008201527f7065727479000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7468696e6720746f20776974686472617700000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e46542053616c65206973206163746976650000000000000000000000000000600082015250565b7f4e4654206973206e6f7420757020666f722073616c6500000000000000000000600082015250565b7f4f6e6c79206f776e65722f61646d696e2063616e2063616e63656c2053616c65600082015250565b7f53616c65206973206e6f7420656e61626c656400000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e4654206973206e6f7420666f722073616c6500000000000000000000000000600082015250565b7f4f6e6c79206f776e6572206f66204e46542063616e2055706461746500000000600082015250565b7f4c656e677468206d69736d617463680000000000000000000000000000000000600082015250565b7f4f6e6c79206f776e65722f61646d696e2063616e20757064617465207072696360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b612e3081612a27565b8114612e3b57600080fd5b50565b612e4781612a39565b8114612e5257600080fd5b50565b612e5e81612a65565b8114612e6957600080fd5b5056fea2646970667358221220d116bb69c9e4d8cd32b5a1107c54f5a4fa22460861af5381edd33d676279ba3864736f6c63430008040033",
}

// MainABI is the input ABI used to generate the binding from.
// Deprecated: Use MainMetaData.ABI instead.
var MainABI = MainMetaData.ABI

// MainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MainMetaData.Bin instead.
var MainBin = MainMetaData.Bin

// DeployMain deploys a new Ethereum contract, binding an instance of Main to it.
func DeployMain(auth *bind.TransactOpts, backend bind.ContractBackend, _nftAddress common.Address, _tokenAddress common.Address) (common.Address, *types.Transaction, *Main, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MainBin), backend, _nftAddress, _tokenAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// Main is an auto generated Go binding around an Ethereum contract.
type Main struct {
	MainCaller     // Read-only binding to the contract
	MainTransactor // Write-only binding to the contract
	MainFilterer   // Log filterer for contract events
}

// MainCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainSession struct {
	Contract     *Main             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainCallerSession struct {
	Contract *MainCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainTransactorSession struct {
	Contract     *MainTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainRaw struct {
	Contract *Main // Generic contract binding to access the raw methods on
}

// MainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainCallerRaw struct {
	Contract *MainCaller // Generic read-only contract binding to access the raw methods on
}

// MainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainTransactorRaw struct {
	Contract *MainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMain creates a new instance of Main, bound to a specific deployed contract.
func NewMain(address common.Address, backend bind.ContractBackend) (*Main, error) {
	contract, err := bindMain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// NewMainCaller creates a new read-only instance of Main, bound to a specific deployed contract.
func NewMainCaller(address common.Address, caller bind.ContractCaller) (*MainCaller, error) {
	contract, err := bindMain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainCaller{contract: contract}, nil
}

// NewMainTransactor creates a new write-only instance of Main, bound to a specific deployed contract.
func NewMainTransactor(address common.Address, transactor bind.ContractTransactor) (*MainTransactor, error) {
	contract, err := bindMain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainTransactor{contract: contract}, nil
}

// NewMainFilterer creates a new log filterer instance of Main, bound to a specific deployed contract.
func NewMainFilterer(address common.Address, filterer bind.ContractFilterer) (*MainFilterer, error) {
	contract, err := bindMain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainFilterer{contract: contract}, nil
}

// bindMain binds a generic wrapper to an already deployed contract.
func bindMain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.MainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.contract.Transact(opts, method, params...)
}

// NFT is a free data retrieval call binding the contract method 0x7c0b8de2.
//
// Solidity: function NFT() view returns(address)
func (_Main *MainCaller) NFT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "NFT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NFT is a free data retrieval call binding the contract method 0x7c0b8de2.
//
// Solidity: function NFT() view returns(address)
func (_Main *MainSession) NFT() (common.Address, error) {
	return _Main.Contract.NFT(&_Main.CallOpts)
}

// NFT is a free data retrieval call binding the contract method 0x7c0b8de2.
//
// Solidity: function NFT() view returns(address)
func (_Main *MainCallerSession) NFT() (common.Address, error) {
	return _Main.Contract.NFT(&_Main.CallOpts)
}

// TOKEN is a free data retrieval call binding the contract method 0x82bfefc8.
//
// Solidity: function TOKEN() view returns(address)
func (_Main *MainCaller) TOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TOKEN is a free data retrieval call binding the contract method 0x82bfefc8.
//
// Solidity: function TOKEN() view returns(address)
func (_Main *MainSession) TOKEN() (common.Address, error) {
	return _Main.Contract.TOKEN(&_Main.CallOpts)
}

// TOKEN is a free data retrieval call binding the contract method 0x82bfefc8.
//
// Solidity: function TOKEN() view returns(address)
func (_Main *MainCallerSession) TOKEN() (common.Address, error) {
	return _Main.Contract.TOKEN(&_Main.CallOpts)
}

// GetSale is a free data retrieval call binding the contract method 0xd8f6d596.
//
// Solidity: function getSale(uint256 nftId) view returns((uint256,address,bool))
func (_Main *MainCaller) GetSale(opts *bind.CallOpts, nftId *big.Int) (LandSaleSale, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getSale", nftId)

	if err != nil {
		return *new(LandSaleSale), err
	}

	out0 := *abi.ConvertType(out[0], new(LandSaleSale)).(*LandSaleSale)

	return out0, err

}

// GetSale is a free data retrieval call binding the contract method 0xd8f6d596.
//
// Solidity: function getSale(uint256 nftId) view returns((uint256,address,bool))
func (_Main *MainSession) GetSale(nftId *big.Int) (LandSaleSale, error) {
	return _Main.Contract.GetSale(&_Main.CallOpts, nftId)
}

// GetSale is a free data retrieval call binding the contract method 0xd8f6d596.
//
// Solidity: function getSale(uint256 nftId) view returns((uint256,address,bool))
func (_Main *MainCallerSession) GetSale(nftId *big.Int) (LandSaleSale, error) {
	return _Main.Contract.GetSale(&_Main.CallOpts, nftId)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address admin) view returns(bool)
func (_Main *MainCaller) IsAdmin(opts *bind.CallOpts, admin common.Address) (bool, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "isAdmin", admin)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address admin) view returns(bool)
func (_Main *MainSession) IsAdmin(admin common.Address) (bool, error) {
	return _Main.Contract.IsAdmin(&_Main.CallOpts, admin)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address admin) view returns(bool)
func (_Main *MainCallerSession) IsAdmin(admin common.Address) (bool, error) {
	return _Main.Contract.IsAdmin(&_Main.CallOpts, admin)
}

// IsEnabled is a free data retrieval call binding the contract method 0x6aa633b6.
//
// Solidity: function isEnabled() view returns(bool)
func (_Main *MainCaller) IsEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "isEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEnabled is a free data retrieval call binding the contract method 0x6aa633b6.
//
// Solidity: function isEnabled() view returns(bool)
func (_Main *MainSession) IsEnabled() (bool, error) {
	return _Main.Contract.IsEnabled(&_Main.CallOpts)
}

// IsEnabled is a free data retrieval call binding the contract method 0x6aa633b6.
//
// Solidity: function isEnabled() view returns(bool)
func (_Main *MainCallerSession) IsEnabled() (bool, error) {
	return _Main.Contract.IsEnabled(&_Main.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainSession) Owner() (common.Address, error) {
	return _Main.Contract.Owner(&_Main.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Main *MainCallerSession) Owner() (common.Address, error) {
	return _Main.Contract.Owner(&_Main.CallOpts)
}

// AirDrop is a paid mutator transaction binding the contract method 0xaed38015.
//
// Solidity: function airDrop(uint256 nftId, address user) returns()
func (_Main *MainTransactor) AirDrop(opts *bind.TransactOpts, nftId *big.Int, user common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "airDrop", nftId, user)
}

// AirDrop is a paid mutator transaction binding the contract method 0xaed38015.
//
// Solidity: function airDrop(uint256 nftId, address user) returns()
func (_Main *MainSession) AirDrop(nftId *big.Int, user common.Address) (*types.Transaction, error) {
	return _Main.Contract.AirDrop(&_Main.TransactOpts, nftId, user)
}

// AirDrop is a paid mutator transaction binding the contract method 0xaed38015.
//
// Solidity: function airDrop(uint256 nftId, address user) returns()
func (_Main *MainTransactorSession) AirDrop(nftId *big.Int, user common.Address) (*types.Transaction, error) {
	return _Main.Contract.AirDrop(&_Main.TransactOpts, nftId, user)
}

// BatchPurchaseProperty is a paid mutator transaction binding the contract method 0x7ddbd58f.
//
// Solidity: function batchPurchaseProperty(uint256[] nftIds) returns()
func (_Main *MainTransactor) BatchPurchaseProperty(opts *bind.TransactOpts, nftIds []*big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "batchPurchaseProperty", nftIds)
}

// BatchPurchaseProperty is a paid mutator transaction binding the contract method 0x7ddbd58f.
//
// Solidity: function batchPurchaseProperty(uint256[] nftIds) returns()
func (_Main *MainSession) BatchPurchaseProperty(nftIds []*big.Int) (*types.Transaction, error) {
	return _Main.Contract.BatchPurchaseProperty(&_Main.TransactOpts, nftIds)
}

// BatchPurchaseProperty is a paid mutator transaction binding the contract method 0x7ddbd58f.
//
// Solidity: function batchPurchaseProperty(uint256[] nftIds) returns()
func (_Main *MainTransactorSession) BatchPurchaseProperty(nftIds []*big.Int) (*types.Transaction, error) {
	return _Main.Contract.BatchPurchaseProperty(&_Main.TransactOpts, nftIds)
}

// BatchSellProperty is a paid mutator transaction binding the contract method 0xebe1c149.
//
// Solidity: function batchSellProperty(uint256[] nftIds, uint256[] prices) returns()
func (_Main *MainTransactor) BatchSellProperty(opts *bind.TransactOpts, nftIds []*big.Int, prices []*big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "batchSellProperty", nftIds, prices)
}

// BatchSellProperty is a paid mutator transaction binding the contract method 0xebe1c149.
//
// Solidity: function batchSellProperty(uint256[] nftIds, uint256[] prices) returns()
func (_Main *MainSession) BatchSellProperty(nftIds []*big.Int, prices []*big.Int) (*types.Transaction, error) {
	return _Main.Contract.BatchSellProperty(&_Main.TransactOpts, nftIds, prices)
}

// BatchSellProperty is a paid mutator transaction binding the contract method 0xebe1c149.
//
// Solidity: function batchSellProperty(uint256[] nftIds, uint256[] prices) returns()
func (_Main *MainTransactorSession) BatchSellProperty(nftIds []*big.Int, prices []*big.Int) (*types.Transaction, error) {
	return _Main.Contract.BatchSellProperty(&_Main.TransactOpts, nftIds, prices)
}

// CancelSale is a paid mutator transaction binding the contract method 0xbd94b005.
//
// Solidity: function cancelSale(uint256 nftId) returns()
func (_Main *MainTransactor) CancelSale(opts *bind.TransactOpts, nftId *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "cancelSale", nftId)
}

// CancelSale is a paid mutator transaction binding the contract method 0xbd94b005.
//
// Solidity: function cancelSale(uint256 nftId) returns()
func (_Main *MainSession) CancelSale(nftId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.CancelSale(&_Main.TransactOpts, nftId)
}

// CancelSale is a paid mutator transaction binding the contract method 0xbd94b005.
//
// Solidity: function cancelSale(uint256 nftId) returns()
func (_Main *MainTransactorSession) CancelSale(nftId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.CancelSale(&_Main.TransactOpts, nftId)
}

// PurchaseProperty is a paid mutator transaction binding the contract method 0x79d9c439.
//
// Solidity: function purchaseProperty(uint256 nftId) returns()
func (_Main *MainTransactor) PurchaseProperty(opts *bind.TransactOpts, nftId *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "purchaseProperty", nftId)
}

// PurchaseProperty is a paid mutator transaction binding the contract method 0x79d9c439.
//
// Solidity: function purchaseProperty(uint256 nftId) returns()
func (_Main *MainSession) PurchaseProperty(nftId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.PurchaseProperty(&_Main.TransactOpts, nftId)
}

// PurchaseProperty is a paid mutator transaction binding the contract method 0x79d9c439.
//
// Solidity: function purchaseProperty(uint256 nftId) returns()
func (_Main *MainTransactorSession) PurchaseProperty(nftId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.PurchaseProperty(&_Main.TransactOpts, nftId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainSession) RenounceOwnership() (*types.Transaction, error) {
	return _Main.Contract.RenounceOwnership(&_Main.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Main *MainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Main.Contract.RenounceOwnership(&_Main.TransactOpts)
}

// SellProperty is a paid mutator transaction binding the contract method 0xed46a8cf.
//
// Solidity: function sellProperty(uint256 nftId, uint256 price) returns()
func (_Main *MainTransactor) SellProperty(opts *bind.TransactOpts, nftId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "sellProperty", nftId, price)
}

// SellProperty is a paid mutator transaction binding the contract method 0xed46a8cf.
//
// Solidity: function sellProperty(uint256 nftId, uint256 price) returns()
func (_Main *MainSession) SellProperty(nftId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Main.Contract.SellProperty(&_Main.TransactOpts, nftId, price)
}

// SellProperty is a paid mutator transaction binding the contract method 0xed46a8cf.
//
// Solidity: function sellProperty(uint256 nftId, uint256 price) returns()
func (_Main *MainTransactorSession) SellProperty(nftId *big.Int, price *big.Int) (*types.Transaction, error) {
	return _Main.Contract.SellProperty(&_Main.TransactOpts, nftId, price)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool enabled) returns()
func (_Main *MainTransactor) SetAdmin(opts *bind.TransactOpts, admin common.Address, enabled bool) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "setAdmin", admin, enabled)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool enabled) returns()
func (_Main *MainSession) SetAdmin(admin common.Address, enabled bool) (*types.Transaction, error) {
	return _Main.Contract.SetAdmin(&_Main.TransactOpts, admin, enabled)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x4b0bddd2.
//
// Solidity: function setAdmin(address admin, bool enabled) returns()
func (_Main *MainTransactorSession) SetAdmin(admin common.Address, enabled bool) (*types.Transaction, error) {
	return _Main.Contract.SetAdmin(&_Main.TransactOpts, admin, enabled)
}

// SetEnabled is a paid mutator transaction binding the contract method 0x328d8f72.
//
// Solidity: function setEnabled(bool _isEnabled) returns()
func (_Main *MainTransactor) SetEnabled(opts *bind.TransactOpts, _isEnabled bool) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "setEnabled", _isEnabled)
}

// SetEnabled is a paid mutator transaction binding the contract method 0x328d8f72.
//
// Solidity: function setEnabled(bool _isEnabled) returns()
func (_Main *MainSession) SetEnabled(_isEnabled bool) (*types.Transaction, error) {
	return _Main.Contract.SetEnabled(&_Main.TransactOpts, _isEnabled)
}

// SetEnabled is a paid mutator transaction binding the contract method 0x328d8f72.
//
// Solidity: function setEnabled(bool _isEnabled) returns()
func (_Main *MainTransactorSession) SetEnabled(_isEnabled bool) (*types.Transaction, error) {
	return _Main.Contract.SetEnabled(&_Main.TransactOpts, _isEnabled)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Main.Contract.TransferOwnership(&_Main.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Main *MainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Main.Contract.TransferOwnership(&_Main.TransactOpts, newOwner)
}

// UpdatePrice is a paid mutator transaction binding the contract method 0x82367b2d.
//
// Solidity: function updatePrice(uint256 nftId, uint256 newPrice) returns()
func (_Main *MainTransactor) UpdatePrice(opts *bind.TransactOpts, nftId *big.Int, newPrice *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "updatePrice", nftId, newPrice)
}

// UpdatePrice is a paid mutator transaction binding the contract method 0x82367b2d.
//
// Solidity: function updatePrice(uint256 nftId, uint256 newPrice) returns()
func (_Main *MainSession) UpdatePrice(nftId *big.Int, newPrice *big.Int) (*types.Transaction, error) {
	return _Main.Contract.UpdatePrice(&_Main.TransactOpts, nftId, newPrice)
}

// UpdatePrice is a paid mutator transaction binding the contract method 0x82367b2d.
//
// Solidity: function updatePrice(uint256 nftId, uint256 newPrice) returns()
func (_Main *MainTransactorSession) UpdatePrice(nftId *big.Int, newPrice *big.Int) (*types.Transaction, error) {
	return _Main.Contract.UpdatePrice(&_Main.TransactOpts, nftId, newPrice)
}

// WithdrawEther is a paid mutator transaction binding the contract method 0x7362377b.
//
// Solidity: function withdrawEther() returns()
func (_Main *MainTransactor) WithdrawEther(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "withdrawEther")
}

// WithdrawEther is a paid mutator transaction binding the contract method 0x7362377b.
//
// Solidity: function withdrawEther() returns()
func (_Main *MainSession) WithdrawEther() (*types.Transaction, error) {
	return _Main.Contract.WithdrawEther(&_Main.TransactOpts)
}

// WithdrawEther is a paid mutator transaction binding the contract method 0x7362377b.
//
// Solidity: function withdrawEther() returns()
func (_Main *MainTransactorSession) WithdrawEther() (*types.Transaction, error) {
	return _Main.Contract.WithdrawEther(&_Main.TransactOpts)
}

// WithdrawTokens is a paid mutator transaction binding the contract method 0x8d8f2adb.
//
// Solidity: function withdrawTokens() returns()
func (_Main *MainTransactor) WithdrawTokens(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "withdrawTokens")
}

// WithdrawTokens is a paid mutator transaction binding the contract method 0x8d8f2adb.
//
// Solidity: function withdrawTokens() returns()
func (_Main *MainSession) WithdrawTokens() (*types.Transaction, error) {
	return _Main.Contract.WithdrawTokens(&_Main.TransactOpts)
}

// WithdrawTokens is a paid mutator transaction binding the contract method 0x8d8f2adb.
//
// Solidity: function withdrawTokens() returns()
func (_Main *MainTransactorSession) WithdrawTokens() (*types.Transaction, error) {
	return _Main.Contract.WithdrawTokens(&_Main.TransactOpts)
}

// MainAdminAccessSetIterator is returned from FilterAdminAccessSet and is used to iterate over the raw logs and unpacked data for AdminAccessSet events raised by the Main contract.
type MainAdminAccessSetIterator struct {
	Event *MainAdminAccessSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainAdminAccessSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainAdminAccessSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainAdminAccessSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainAdminAccessSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainAdminAccessSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainAdminAccessSet represents a AdminAccessSet event raised by the Main contract.
type MainAdminAccessSet struct {
	Admin   common.Address
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAdminAccessSet is a free log retrieval operation binding the contract event 0xe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb78.
//
// Solidity: event AdminAccessSet(address _admin, bool _enabled)
func (_Main *MainFilterer) FilterAdminAccessSet(opts *bind.FilterOpts) (*MainAdminAccessSetIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "AdminAccessSet")
	if err != nil {
		return nil, err
	}
	return &MainAdminAccessSetIterator{contract: _Main.contract, event: "AdminAccessSet", logs: logs, sub: sub}, nil
}

// WatchAdminAccessSet is a free log subscription operation binding the contract event 0xe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb78.
//
// Solidity: event AdminAccessSet(address _admin, bool _enabled)
func (_Main *MainFilterer) WatchAdminAccessSet(opts *bind.WatchOpts, sink chan<- *MainAdminAccessSet) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "AdminAccessSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainAdminAccessSet)
				if err := _Main.contract.UnpackLog(event, "AdminAccessSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminAccessSet is a log parse operation binding the contract event 0xe529461c8529abc0e0fe7c5ee361f74fe22e0b7574df1fc0b7558a282091fb78.
//
// Solidity: event AdminAccessSet(address _admin, bool _enabled)
func (_Main *MainFilterer) ParseAdminAccessSet(log types.Log) (*MainAdminAccessSet, error) {
	event := new(MainAdminAccessSet)
	if err := _Main.contract.UnpackLog(event, "AdminAccessSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainGiftIterator is returned from FilterGift and is used to iterate over the raw logs and unpacked data for Gift events raised by the Main contract.
type MainGiftIterator struct {
	Event *MainGift // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainGiftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainGift)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainGift)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainGiftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainGiftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainGift represents a Gift event raised by the Main contract.
type MainGift struct {
	NftId *big.Int
	User  common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterGift is a free log retrieval operation binding the contract event 0xaf8063240d3bff004c7c1831485d9f8dd5f0b311092da3ef6295b7e6fefb6d08.
//
// Solidity: event Gift(uint256 _nftId, address _user)
func (_Main *MainFilterer) FilterGift(opts *bind.FilterOpts) (*MainGiftIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "Gift")
	if err != nil {
		return nil, err
	}
	return &MainGiftIterator{contract: _Main.contract, event: "Gift", logs: logs, sub: sub}, nil
}

// WatchGift is a free log subscription operation binding the contract event 0xaf8063240d3bff004c7c1831485d9f8dd5f0b311092da3ef6295b7e6fefb6d08.
//
// Solidity: event Gift(uint256 _nftId, address _user)
func (_Main *MainFilterer) WatchGift(opts *bind.WatchOpts, sink chan<- *MainGift) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "Gift")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainGift)
				if err := _Main.contract.UnpackLog(event, "Gift", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGift is a log parse operation binding the contract event 0xaf8063240d3bff004c7c1831485d9f8dd5f0b311092da3ef6295b7e6fefb6d08.
//
// Solidity: event Gift(uint256 _nftId, address _user)
func (_Main *MainFilterer) ParseGift(log types.Log) (*MainGift, error) {
	event := new(MainGift)
	if err := _Main.contract.UnpackLog(event, "Gift", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Main contract.
type MainOwnershipTransferredIterator struct {
	Event *MainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainOwnershipTransferred represents a OwnershipTransferred event raised by the Main contract.
type MainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Main.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MainOwnershipTransferredIterator{contract: _Main.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Main.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainOwnershipTransferred)
				if err := _Main.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Main *MainFilterer) ParseOwnershipTransferred(log types.Log) (*MainOwnershipTransferred, error) {
	event := new(MainOwnershipTransferred)
	if err := _Main.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainPriceUpdatedIterator is returned from FilterPriceUpdated and is used to iterate over the raw logs and unpacked data for PriceUpdated events raised by the Main contract.
type MainPriceUpdatedIterator struct {
	Event *MainPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainPriceUpdated represents a PriceUpdated event raised by the Main contract.
type MainPriceUpdated struct {
	NftId *big.Int
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPriceUpdated is a free log retrieval operation binding the contract event 0x945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd696838.
//
// Solidity: event PriceUpdated(uint256 _nftId, uint256 _price)
func (_Main *MainFilterer) FilterPriceUpdated(opts *bind.FilterOpts) (*MainPriceUpdatedIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "PriceUpdated")
	if err != nil {
		return nil, err
	}
	return &MainPriceUpdatedIterator{contract: _Main.contract, event: "PriceUpdated", logs: logs, sub: sub}, nil
}

// WatchPriceUpdated is a free log subscription operation binding the contract event 0x945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd696838.
//
// Solidity: event PriceUpdated(uint256 _nftId, uint256 _price)
func (_Main *MainFilterer) WatchPriceUpdated(opts *bind.WatchOpts, sink chan<- *MainPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "PriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainPriceUpdated)
				if err := _Main.contract.UnpackLog(event, "PriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceUpdated is a log parse operation binding the contract event 0x945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd696838.
//
// Solidity: event PriceUpdated(uint256 _nftId, uint256 _price)
func (_Main *MainFilterer) ParsePriceUpdated(log types.Log) (*MainPriceUpdated, error) {
	event := new(MainPriceUpdated)
	if err := _Main.contract.UnpackLog(event, "PriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainSaleAddedIterator is returned from FilterSaleAdded and is used to iterate over the raw logs and unpacked data for SaleAdded events raised by the Main contract.
type MainSaleAddedIterator struct {
	Event *MainSaleAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainSaleAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainSaleAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainSaleAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainSaleAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainSaleAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainSaleAdded represents a SaleAdded event raised by the Main contract.
type MainSaleAdded struct {
	NftId     *big.Int
	Price     *big.Int
	Owner     common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSaleAdded is a free log retrieval operation binding the contract event 0xf59a8e57322d4e7e909b00d06e23797136706d0039f6df9bc2eed74a829b9489.
//
// Solidity: event SaleAdded(uint256 _nftId, uint256 _price, address _owner, uint256 _timestamp)
func (_Main *MainFilterer) FilterSaleAdded(opts *bind.FilterOpts) (*MainSaleAddedIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "SaleAdded")
	if err != nil {
		return nil, err
	}
	return &MainSaleAddedIterator{contract: _Main.contract, event: "SaleAdded", logs: logs, sub: sub}, nil
}

// WatchSaleAdded is a free log subscription operation binding the contract event 0xf59a8e57322d4e7e909b00d06e23797136706d0039f6df9bc2eed74a829b9489.
//
// Solidity: event SaleAdded(uint256 _nftId, uint256 _price, address _owner, uint256 _timestamp)
func (_Main *MainFilterer) WatchSaleAdded(opts *bind.WatchOpts, sink chan<- *MainSaleAdded) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "SaleAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainSaleAdded)
				if err := _Main.contract.UnpackLog(event, "SaleAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSaleAdded is a log parse operation binding the contract event 0xf59a8e57322d4e7e909b00d06e23797136706d0039f6df9bc2eed74a829b9489.
//
// Solidity: event SaleAdded(uint256 _nftId, uint256 _price, address _owner, uint256 _timestamp)
func (_Main *MainFilterer) ParseSaleAdded(log types.Log) (*MainSaleAdded, error) {
	event := new(MainSaleAdded)
	if err := _Main.contract.UnpackLog(event, "SaleAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainSaleCancelledIterator is returned from FilterSaleCancelled and is used to iterate over the raw logs and unpacked data for SaleCancelled events raised by the Main contract.
type MainSaleCancelledIterator struct {
	Event *MainSaleCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainSaleCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainSaleCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainSaleCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainSaleCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainSaleCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainSaleCancelled represents a SaleCancelled event raised by the Main contract.
type MainSaleCancelled struct {
	NftId       *big.Int
	Price       *big.Int
	Owner       common.Address
	CancelledBy common.Address
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSaleCancelled is a free log retrieval operation binding the contract event 0xb7cfc6175ad793ef8751b7deb32917c22f292c84ecd4ca57beabef3ed6bc8bdb.
//
// Solidity: event SaleCancelled(uint256 _nftId, uint256 _price, address _owner, address _cancelledBy, uint256 _timestamp)
func (_Main *MainFilterer) FilterSaleCancelled(opts *bind.FilterOpts) (*MainSaleCancelledIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "SaleCancelled")
	if err != nil {
		return nil, err
	}
	return &MainSaleCancelledIterator{contract: _Main.contract, event: "SaleCancelled", logs: logs, sub: sub}, nil
}

// WatchSaleCancelled is a free log subscription operation binding the contract event 0xb7cfc6175ad793ef8751b7deb32917c22f292c84ecd4ca57beabef3ed6bc8bdb.
//
// Solidity: event SaleCancelled(uint256 _nftId, uint256 _price, address _owner, address _cancelledBy, uint256 _timestamp)
func (_Main *MainFilterer) WatchSaleCancelled(opts *bind.WatchOpts, sink chan<- *MainSaleCancelled) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "SaleCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainSaleCancelled)
				if err := _Main.contract.UnpackLog(event, "SaleCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSaleCancelled is a log parse operation binding the contract event 0xb7cfc6175ad793ef8751b7deb32917c22f292c84ecd4ca57beabef3ed6bc8bdb.
//
// Solidity: event SaleCancelled(uint256 _nftId, uint256 _price, address _owner, address _cancelledBy, uint256 _timestamp)
func (_Main *MainFilterer) ParseSaleCancelled(log types.Log) (*MainSaleCancelled, error) {
	event := new(MainSaleCancelled)
	if err := _Main.contract.UnpackLog(event, "SaleCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainSoldIterator is returned from FilterSold and is used to iterate over the raw logs and unpacked data for Sold events raised by the Main contract.
type MainSoldIterator struct {
	Event *MainSold // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainSoldIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainSold)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainSold)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainSoldIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainSoldIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainSold represents a Sold event raised by the Main contract.
type MainSold struct {
	NftId     *big.Int
	Seller    common.Address
	Buyer     common.Address
	Price     *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSold is a free log retrieval operation binding the contract event 0xa70b1a854695e7921b122988e216d3a6cd10ed799017c67b1ff231967e6bf56d.
//
// Solidity: event Sold(uint256 _nftId, address _seller, address _buyer, uint256 _price, uint256 _timestamp)
func (_Main *MainFilterer) FilterSold(opts *bind.FilterOpts) (*MainSoldIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "Sold")
	if err != nil {
		return nil, err
	}
	return &MainSoldIterator{contract: _Main.contract, event: "Sold", logs: logs, sub: sub}, nil
}

// WatchSold is a free log subscription operation binding the contract event 0xa70b1a854695e7921b122988e216d3a6cd10ed799017c67b1ff231967e6bf56d.
//
// Solidity: event Sold(uint256 _nftId, address _seller, address _buyer, uint256 _price, uint256 _timestamp)
func (_Main *MainFilterer) WatchSold(opts *bind.WatchOpts, sink chan<- *MainSold) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "Sold")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainSold)
				if err := _Main.contract.UnpackLog(event, "Sold", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSold is a log parse operation binding the contract event 0xa70b1a854695e7921b122988e216d3a6cd10ed799017c67b1ff231967e6bf56d.
//
// Solidity: event Sold(uint256 _nftId, address _seller, address _buyer, uint256 _price, uint256 _timestamp)
func (_Main *MainFilterer) ParseSold(log types.Log) (*MainSold, error) {
	event := new(MainSold)
	if err := _Main.contract.UnpackLog(event, "Sold", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainWithdrawFundsIterator is returned from FilterWithdrawFunds and is used to iterate over the raw logs and unpacked data for WithdrawFunds events raised by the Main contract.
type MainWithdrawFundsIterator struct {
	Event *MainWithdrawFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainWithdrawFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainWithdrawFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainWithdrawFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainWithdrawFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainWithdrawFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainWithdrawFunds represents a WithdrawFunds event raised by the Main contract.
type MainWithdrawFunds struct {
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawFunds is a free log retrieval operation binding the contract event 0xc67387b8229e689a6f1e2c3feafcfae2206a4d6e581bf95e25dbb0c934432a64.
//
// Solidity: event WithdrawFunds(uint256 _balance)
func (_Main *MainFilterer) FilterWithdrawFunds(opts *bind.FilterOpts) (*MainWithdrawFundsIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "WithdrawFunds")
	if err != nil {
		return nil, err
	}
	return &MainWithdrawFundsIterator{contract: _Main.contract, event: "WithdrawFunds", logs: logs, sub: sub}, nil
}

// WatchWithdrawFunds is a free log subscription operation binding the contract event 0xc67387b8229e689a6f1e2c3feafcfae2206a4d6e581bf95e25dbb0c934432a64.
//
// Solidity: event WithdrawFunds(uint256 _balance)
func (_Main *MainFilterer) WatchWithdrawFunds(opts *bind.WatchOpts, sink chan<- *MainWithdrawFunds) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "WithdrawFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainWithdrawFunds)
				if err := _Main.contract.UnpackLog(event, "WithdrawFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawFunds is a log parse operation binding the contract event 0xc67387b8229e689a6f1e2c3feafcfae2206a4d6e581bf95e25dbb0c934432a64.
//
// Solidity: event WithdrawFunds(uint256 _balance)
func (_Main *MainFilterer) ParseWithdrawFunds(log types.Log) (*MainWithdrawFunds, error) {
	event := new(MainWithdrawFunds)
	if err := _Main.contract.UnpackLog(event, "WithdrawFunds", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
